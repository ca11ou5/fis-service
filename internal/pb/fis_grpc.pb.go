// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: internal/pb/fis.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FisService_FullMappingAndSave_FullMethodName = "/fis.FisService/FullMappingAndSave"
)

// FisServiceClient is the client API for FisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FisServiceClient interface {
	FullMappingAndSave(ctx context.Context, in *FullMappingAndSaveRequest, opts ...grpc.CallOption) (*FullMappingAndSaveResponse, error)
}

type fisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFisServiceClient(cc grpc.ClientConnInterface) FisServiceClient {
	return &fisServiceClient{cc}
}

func (c *fisServiceClient) FullMappingAndSave(ctx context.Context, in *FullMappingAndSaveRequest, opts ...grpc.CallOption) (*FullMappingAndSaveResponse, error) {
	out := new(FullMappingAndSaveResponse)
	err := c.cc.Invoke(ctx, FisService_FullMappingAndSave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FisServiceServer is the server API for FisService service.
// All implementations should embed UnimplementedFisServiceServer
// for forward compatibility
type FisServiceServer interface {
	FullMappingAndSave(context.Context, *FullMappingAndSaveRequest) (*FullMappingAndSaveResponse, error)
}

// UnimplementedFisServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFisServiceServer struct {
}

func (UnimplementedFisServiceServer) FullMappingAndSave(context.Context, *FullMappingAndSaveRequest) (*FullMappingAndSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullMappingAndSave not implemented")
}

// UnsafeFisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FisServiceServer will
// result in compilation errors.
type UnsafeFisServiceServer interface {
	mustEmbedUnimplementedFisServiceServer()
}

func RegisterFisServiceServer(s grpc.ServiceRegistrar, srv FisServiceServer) {
	s.RegisterService(&FisService_ServiceDesc, srv)
}

func _FisService_FullMappingAndSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullMappingAndSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FisServiceServer).FullMappingAndSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FisService_FullMappingAndSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FisServiceServer).FullMappingAndSave(ctx, req.(*FullMappingAndSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FisService_ServiceDesc is the grpc.ServiceDesc for FisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fis.FisService",
	HandlerType: (*FisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FullMappingAndSave",
			Handler:    _FisService_FullMappingAndSave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pb/fis.proto",
}
